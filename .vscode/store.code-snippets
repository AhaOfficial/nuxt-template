{
  "Nuxt Store 1 Declare": {
    "scope": "typescript",
    "prefix": [
      "nuxt-store-1-declare",
      "ns1d"
    ],
    "body": [
      "/**",
      " * @description 1단계 - 선언",
      " * 상태 저장소에 보관될 자료의",
      " * 타입스크립트 규격을 선언합니다.",
      " */",
      "\/\/ * 예시:",
      "\/\/ * export interface Todo {}",
      "\/\/ * export interface TodoList { list: Todo[] }",
      "",
    ],
    "description": "넉스트 스토어의 선언(Declare) 과정입니다."
  },
  "Nuxt Store 2 Define": {
    "scope": "typescript",
    "prefix": [
      "nuxt-store-2-define",
      "ns2d"
    ],
    "body": [
      "import { Store } from 'vue-state-store'",
      "import { VueAPI } from '~/core'",
      "",
      "/**",
      " * @description 2단계 - 정의",
      " * 타입스크립트 규격을 토대로",
      " * 상태 저장소 클래스를 정의합니다.",
      " */",
      "\/\/ * 예시:",
      "\/\/ * export class Todo extends Store<TodoList> {}",
      "",
      "/**",
      " * @description 2단계 - 정의",
      " * 상태 저장소 클래스를 토대로",
      " * 상태 저장소 인스턴스와 초기 값을 정의합니다.",
      " */",
      "\/\/ * 예시:",
      "\/\/ * export const todo = new Todo({ list: [] })",
      "",
    ],
    "description": "넉스트 스토어의 정의(Define) 과정입니다."
  },
  "Nuxt Store 3 Inject": {
    "scope": "typescript",
    "prefix": [
      "nuxt-store-3-inject",
      "ns3i"
    ],
    "body": [
      "import { Store } from 'vue-state-store'",
      "import { VueAPI } from '~/core'",
      "",
      "/**",
      " * @description 3단계 - 주입",
      " * 컴포넌트에 나중에 주입 될 컴포넌트 로직을",
      " * 클래스 형태로 바깥에서 정의합니다.",
      " * (Vue 의 Mix-in 을 안 쓰고 클래스를 쓰기 위한 방법입니다.)",
      " */",
      "\/\/ * export class UseTodo {",
      "\/\/ *   /**",
      "\/\/     * 상태 저장소 내장 예시",
      "\/\/ *    */",
      "\/\/ *   todo = todo",
      "",
      "\/\/ *   /**",
      "\/\/ *    * 바인딩 된 상태 저장소",
      "\/\/ *    */",
      "\/\/ *   $todo = todo.bind()",
      "",
      "\/\/ *   /**",
      "\/\/ *    * 컴포넌트용 바인딩 변수 예시",
      "\/\/ *    */",
      "\/\/ *   inputValue = VueAPI.ref('')",
      "",
      "\/\/ *   /**",
      "\/\/ *    * 계산된 값 예시",
      "\/\/ *    */",
      "\/\/ *   todos = VueAPI.computed(() => this.$todo.list)",
      "",
      "\/\/ *   /**",
      "\/\/ *    *",
      "\/\/ *    */",
      "\/\/ *   addTodo = (value) => {",
      "\/\/ *     this.todo.list.push(value)",
      "\/\/ *   }",
      "\/\/ * }",
      "",
    ],
    "description": "넉스트 스토어의 주입(Inject) 과정입니다."
  },
  "Nuxt Store 4 Use": {
    "scope": "typescript",
    "prefix": [
      "nuxt-store-4-use",
      "ns4u"
    ],
    "body": [
      "import { Store } from 'vue-state-store'",
      "import { VueAPI } from '~/core'",
      "",
      "/**",
      " * @description 4단계 - 사용",
      " * 컴포넌트에서 사용하면 상태 저장소와",
      " * 관련된 컴포넌트 로직을 반환하는 함수를 정의합니다.",
      " */",
      "\/\/ * export const useTodo = () => {",
      "\/\/ *   const todoInstance = new UseTodo()",
      "\/\/ *   \/\/ 여기서 컴포넌트 로직을 자유롭게 사용할 수 있습니다.",
      "\/\/ *   \/\/ VueAPI.onMounted(()=>{})",
      "\/\/ *   return todoInstance",
      "\/\/ * }",
      "",
    ],
    "description": "넉스트 스토어의 사용(Use) 과정입니다."
  },
  "Nuxt Store Single": {
    "scope": "typescript",
    "prefix": [
      "nuxt-store-single",
      "nss"
    ],
    "body": [
      "import { Store } from 'vue-state-store'",
      "import { VueAPI } from '~/core'",
      "",
      "/**",
      " * @description 1단계 - 선언",
      " * 상태 저장소에 보관될 자료의",
      " * 타입스크립트 규격을 선언합니다.",
      " */",
      "\/\/ * 예시:",
      "\/\/ * export interface Todo {}",
      "\/\/ * export interface TodoList { list: Todo[] }",
      "",
      "/**",
      " * @description 2단계 - 정의",
      " * 타입스크립트 규격을 토대로",
      " * 상태 저장소 클래스를 정의합니다.",
      " */",
      "\/\/ * 예시:",
      "\/\/ * export class Todo extends Store<TodoList> {}",
      "",
      "/**",
      " * @description 2단계 - 정의",
      " * 상태 저장소 클래스를 토대로",
      " * 상태 저장소 인스턴스와 초기 값을 정의합니다.",
      " */",
      "\/\/ * 예시:",
      "\/\/ * export const todo = new Todo({ list: [] })",
      "",
      "/**",
      " * @description 3단계 - 주입",
      " * 컴포넌트에 나중에 주입 될 컴포넌트 로직을",
      " * 클래스 형태로 바깥에서 정의합니다.",
      " * (Vue 의 Mix-in 을 안 쓰고 클래스를 쓰기 위한 방법입니다.)",
      " */",
      "\/\/ * export class UseTodo {",
      "\/\/ *   /**",
      "\/\/     * 상태 저장소 내장 예시",
      "\/\/ *    */",
      "\/\/ *   todo = todo",
      "",
      "\/\/ *   /**",
      "\/\/ *    * 바인딩 된 상태 저장소",
      "\/\/ *    */",
      "\/\/ *   $todo = todo.bind()",
      "",
      "\/\/ *   /**",
      "\/\/ *    * 컴포넌트용 바인딩 변수 예시",
      "\/\/ *    */",
      "\/\/ *   inputValue = VueAPI.ref('')",
      "",
      "\/\/ *   /**",
      "\/\/ *    * 계산된 값 예시",
      "\/\/ *    */",
      "\/\/ *   todos = VueAPI.computed(() => this.$todo.list)",
      "",
      "\/\/ *   /**",
      "\/\/ *    *",
      "\/\/ *    */",
      "\/\/ *   addTodo = (value) => {",
      "\/\/ *     this.todo.list.push(value)",
      "\/\/ *   }",
      "\/\/ * }",
      "",
      "/**",
      " * @description 4단계 - 사용",
      " * 컴포넌트에서 사용하면 상태 저장소와",
      " * 관련된 컴포넌트 로직을 반환하는 함수를 정의합니다.",
      " */",
      "\/\/ * export const useTodo = () => {",
      "\/\/ *   const todoInstance = new UseTodo()",
      "\/\/ *   \/\/ 여기서 컴포넌트 로직을 자유롭게 사용할 수 있습니다.",
      "\/\/ *   \/\/ VueAPI.onMounted(()=>{})",
      "\/\/ *   return todoInstance",
      "\/\/ * }",
      "",
    ],
    "description": "넉스트 스토어의 단일 파일 정의 예시입니다."
  },
}