# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    branches:
      # 👀 정책이 필요합니다. 
      - master
      # - build/CICD 
    
name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: 💡 AWS 인증키를 설정합니다.
      uses: aws-actions/configure-aws-credentials@v1
      # 💡 aws 인증 키 
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: 🗝  ECR 레포지토리에 로그인 합니다. 
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: 📤  ECR에 이미지 작성, 태그 지정 및 이미지를 푸시합니다.
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # 💡 ECR REPO NAME  
        ECR_REPOSITORY: aws-ecs-test-new
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    # 💡 TASK DEFINITION DOWNLOAD
    - name: 📥  작업 정의 파일을 다운로드 받습니다.
      run: |
        aws ecs describe-task-definition --task-definition aha-qna-role --query taskDefinition > task-definition.json
    
    - name: 📝  ECS 작업 정의에 새 이미지 ID를 입력합니다.
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        # 💡 ECS CONTAINER NAME
        container-name: aha-qna-web-container
        image: ${{ steps.build-image.outputs.image }}

    - name: 📦  ECS 배포 작업을 정의합니다.
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        # 💡 ECS CLUSTER & ECS SERVICE 
        service: aha-qna-web-cluster-service
        cluster: aha-qna-web-cluster
        wait-for-service-stability: true